# File: ClientServerApi.adsl.yaml
# Describes the main API for an authorized client.
include:
  - common

types:
  Telemetry:
    abstract: true
  TelemetryCPP:
    id: 1
    parent: Telemetry
    fields:
      utm_id: int
      blob: byte[]
      lib_version: String
      os: String
      compiler: String

  LoginStream:
    stream:
      api: AuthorizedApi
      crypto: true
  LoginClientStream:
    stream:
      api: ClientApiSafe
      crypto: true

  ClientInteractionClientStream:
    stream:
      api: ServerApiByUidClient
  Message:
    fields:
      uid: uuid
      data: byte[]
  ClientApiStream:
    stream:
      api: ServerApiByUid
api:
  ClientApiUnsafe:
    methods:
      sendSafeApiDataMulti:
        id: 3
        params:
          backId: byte
          data: LoginClientStream
      sendSafeApiData:
        id: 4
        params:
          data: LoginClientStream

  ClientApiSafe:
    methods:
      changeParent:
        id: 3
        params:
          uid: UUID
      changeAlias:
        id: 4
        params:
          alias: UUID
      newChild:
        id: 5
        params:
          uid: UUID
      sendMessages:
        id: 6
        params:
          msg: Message[]
      sendServerDescriptor:
        id: 7
        params:
          serverDescriptor: ServerDescriptor
      sendServerDescriptors:
        id: 8
        params:
          serverDescriptors: ServerDescriptor[]
      sendCloud:
        id: 9
        params:
          uid: UUID
          cloud: Cloud
      sendClouds:
        id: 10
        params:
          clouds: UUIDAndCloud[]
      requestTelemetry:
        id: 11

  AuthorizedApi:
    methods:
      backId:
        id: 3
        params:
          id: byte
      ping:
        id: 4
        returns: void
        params:
          nextConnectMsDuration: long
      client:
        id: 5
        params:
          uid: UUID
          stream: ClientApiStream
      sendMessage:
        id: 6
        params:
          msg: Message
      sendMessages:
        id: 7
        params:
          msg: Message[]
      createAccessGroup:
        id: 8
        returns: long
        params:
          owner: UUID
          uids: UUID[]
      addToAccessGroup:
        id: 9
        returns: bool
        params:
          groupId: long
          uid: UUID
      removeFromAccessGroup:
        id: 10
        returns: bool
        params:
          groupId: long
          uid: UUID
      checkAccessForSendMessage:
        id: 11
        returns: void
        params:
          uid: UUID
      resolverServers:
        id: 12
        params:
          sid: short[]
      resolverClouds:
        id: 13
        params:
          uids: UUID[]
      getAccessGroups:
        id: 14
        returns: long[]
        params:
          uid: UUID
      getAccessGroup:
        id: 15
        returns: AccessGroup
        params:
          groupId: long
      getAllAccessedClients:
        id: 16
        returns: UUID[]
        params:
          uid: UUID
      checkAccessForSendMessage2:
        id: 17
        returns: bool
        params:
          uid1: UUID
          uid2: UUID
      sendTelemetry:
        id: 18
        params:
          telemetry: Telemetry

  LoginApi:
    methods:
      getTimeUTC:
        id: 3
        returns: long
      loginByUID:
        id: 4
        params:
          uid: UUID
          data: LoginStream
      loginByAlias:
        id: 5
        params:
          alias: UUID
          data: LoginStream
  ServerApiByUidClient:
  ServerApiByUid:
    methods:
      getBalance:
        id: 3
        returns: long
      setParent:
        id: 4
        returns: void
        params:
          uid: UUID
      block:
        id: 5
        returns: void
      getPosition:
        id: 6
        returns: Cloud
      getParent:
        id: 7
        returns: UUID
      getBeneficiary:
        id: 8
        returns: UUID
      setBeneficiary:
        id: 9
        returns: void
        params:
          uid: UUID
      getBlockTime:
        id: 10
        returns: Date
      unblock:
        id: 11
        returns: void
      createTime:
        id: 12
        returns: Date
      onlineTime:
        id: 13
        returns: Date
      addAccessGroup:
        id: 14
        returns: bool
        params:
          groupId: long
      removeAccessGroup:
        id: 15
        returns: bool
        params:
          groupId: long
